<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 我的Blog</title>
    <link>http://ZackZK.github.io/tags/python/</link>
    <description>Recent content in Python on 我的Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©除非特殊说明，欢迎转载</copyright>
    <lastBuildDate>Fri, 26 Aug 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ZackZK.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python exec的使用过程中碰到的坑</title>
      <link>http://ZackZK.github.io/post/2016-08-26-python-exec-statement/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ZackZK.github.io/post/2016-08-26-python-exec-statement/</guid>
      <description> python的exec可以直接运行一个文件中的python脚本，或者一个字符串里的python语句。为什么不直接调用这个文件，或者语句呢？一个典型的场景就是我们要运行的python脚本存在数据库中，当然也可以把文件内容从数据库中读取出来，生成临时文件，再运行。但是如果使用exec，就可以on fly的运行python脚本了。
exec 语法 </description>
    </item>
    
    <item>
      <title>python 时间类型操作</title>
      <link>http://ZackZK.github.io/post/2016-08-26-python-datetime-string-operation/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ZackZK.github.io/post/2016-08-26-python-datetime-string-operation/</guid>
      <description>经常碰到需要对日期时间的字符串操作，查了又经常忘记，所以写到这里当作自己的笔记。
datetime模块里有几个经常用到类, datetime, date, time
 date 日期类 (年，月，日) time 时间类 (小时， 分钟， 秒， 微秒) datetime 日期 + 时间  datetime类 从字符串到datetime  strptime函数 &amp;gt;&amp;gt;&amp;gt; datetime.datetime.strptime(&amp;#39;06-05-2010&amp;#39;, &amp;#34;%d-%m-%Y&amp;#34;).date() datetime.date(2010, 05, 06)
 第三方库 dateutil from dateutil import parser dt = parser.parse(&amp;#34;Aug 28 1999 12:00AM&amp;#34;)
  可以通过pip命令安装dateutil安装 pip install python-dateutil
| 格式化 | 意义 | 例子 | |&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| | %d | Day of the month as a zero-padded decimal number.前面填充0的日期 | 比如00, 01, &amp;hellip;, 31 | | %m | Month as a zero-padded decimal number.</description>
    </item>
    
    <item>
      <title>python 杂项记录</title>
      <link>http://ZackZK.github.io/post/2016-08-26-python-misc/</link>
      <pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ZackZK.github.io/post/2016-08-26-python-misc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用requests的网络爬虫</title>
      <link>http://ZackZK.github.io/post/2016-01-21-python-requests-spider/</link>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ZackZK.github.io/post/2016-01-21-python-requests-spider/</guid>
      <description> requests 帮助主页： http://docs.python-requests.org/en/latest/user/quickstart/
1. requests的json支持 requests本身自带了json支持，不需要额外的json库来做转换。比如得到的内容是json格式，可以使用
import requests r = requests.get(&amp;#39;https://api.github.com/events&amp;#39;) r.json() [{u&amp;#39;repository&amp;#39;: {u&amp;#39;open_issues&amp;#39;: 0, u&amp;#39;url&amp;#39;: &amp;#39;https://github.com/... 2. form-encoded data requests库可以简单的将dict类型传递给get或post方法的data参数就可以实现自动实现传递form-encoded参数。但是，如果参数本身是一个数组的话，比如网站需要传下面的POST参数：
可以看出来，amarket和coupon_descr都是数组类型，有多个数值，这个时候需要通过将list类型赋值给对应的dict key，代码如下：
data = {&amp;#34;is_funda_search&amp;#34;:&amp;#34;0&amp;#34;, &amp;#34;fundavolume&amp;#34;:&amp;#34;100&amp;#34;, &amp;#34;amarket[]&amp;#34;:[&amp;#34;sh&amp;#34;, &amp;#34;sz&amp;#34;], &amp;#34;coupon_descr[]&amp;#34;: [&amp;#34;+3.0%&amp;#34;, &amp;#34;+3.2%&amp;#34;, &amp;#34;+3.5%&amp;#34;, &amp;#34;+4.0%&amp;#34;, &amp;#34;other&amp;#34;], &amp;#34;rp&amp;#34;:&amp;#34;50&amp;#34;, &amp;#34;maturity&amp;#34;:&amp;#34;&amp;#34;} content = s.post(url, data=data)</description>
    </item>
    
    <item>
      <title>gevent安装</title>
      <link>http://ZackZK.github.io/post/2015-09-09-gevent-install-failure/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ZackZK.github.io/post/2015-09-09-gevent-install-failure/</guid>
      <description>gevent的安装过程：
1. 安装greenlet依赖 sudo pip install greenlet   2. 安装gevent sudo pip install gevent  安装过程中，碰到下面错误：
gevent/gevent.core.c:9:22: fatal error: pyconfig.h: No such file or directory #include &amp;#34;pyconfig.h&amp;#34;  ^ compilation terminated. error: command &amp;#39;x86_64-linux-gnu-gcc&amp;#39; failed with exit status 1 ---------------------------------------- Cleaning up... Command /usr/bin/python -c &amp;#34;import setuptools, tokenize;__file__=&amp;#39;/tmp/pip_build_root/gevent/setup.py&amp;#39;;exec(compile(getattr(tokenize, &amp;#39;open&amp;#39;, open)(__file__).read().replace(&amp;#39;\r\n&amp;#39;, &amp;#39;\n&amp;#39;), __file__, &amp;#39;exec&amp;#39;))&amp;#34; install --record /tmp/pip-11RdgV-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /tmp/pip_build_root/gevent Storing debug log for failure in /root/.</description>
    </item>
    
    <item>
      <title>python 相对路径文件的操作</title>
      <link>http://ZackZK.github.io/post/2015-07-23-python-relative-file-path-operation/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ZackZK.github.io/post/2015-07-23-python-relative-file-path-operation/</guid>
      <description>python项目中，如果pyton代码需要访问某个外部文件，该文件位于代码文件的某个相对路径位置，我们可以在代码中使用相对路径来访问该文件。 比如图中的代码结构： sample.py文件中，如果要访问配置文件server.ini文件，就可以用 &amp;ldquo;../conf/server.ini&amp;rdquo;来进行访问。
但是经常的问题是，该python文件又被别的目录的python文件import引用， 此时相对路径就会出错。这是因为此时相对路径是基于当前运行脚本的路径来计算的， 如果被引用的python文件和调用文件不在同一个目录，则相对路径就会失效。
比如，我们的例子中， sample.py文件内容如下:
import ConfigParser import os def read_conf(): file_path = &amp;#39;../conf/server.ini&amp;#39; config = ConfigParser.ConfigParser() config.read(file_path) return config.get(&amp;#39;conf&amp;#39;, &amp;#39;value&amp;#39;) if __name__ == &amp;#39;__main__&amp;#39;: print read_conf() main.py内容如下:
from utils.sample import read_conf print read_conf() 比如上图中，如果main.py调用read_conf时就会发现server.ini文件找不到。问题就处在运行main.py时，当前路径是main.py所在的文件夹，而sample.py中使用的相对 路径基于该文件夹就会找错位置。解决办法是在sample.py中使用文件绝对路径来访问server.ini文件， 但是我们又要根据脚本存放的当前位置来获得运行时的路径。这个时候 我们就需要用到python中的 __file__变量， 该内置变量存放了本python文件的当前路径信息，根据该变量，我们可以os.path.dirname(__file__)得到相应文件 的绝对路径。
在sample.py中file_path变量做如下修改：
file_path = &amp;#39;../conf/server.ini&amp;#39; --&amp;gt; file_path = os.path.join(os.path.dirname(__file__) + &amp;#39;/../conf/server.ini&amp;#39;) 注意 路径前加 &amp;lsquo;/&amp;rsquo;,否则文件路径会不完整。
参考资料：
http://stackoverflow.com/questions/918154/relative-paths-in-python http://stackoverflow.com/questions/1270951/python-how-to-refer-to-relative-paths-of-resources-when-working-with-code-repo</description>
    </item>
    
  </channel>
</rss>